					This Program is that simualte memory management which is dynamic memory blocks size
Command to excute the program:
./project algorithm_name memory_size scriptfile.txt

For example:
./project2 BESTFIT N ex75.txt        ------------- Using Best fit algorithm
./project2 FIRSTFIT N ex75.txt	     ------------- Using First Fit algorithm
./project2 NEXTFIT N ex75.txt	     ------------- Using Next Fit algorithm
./project2 BUDDY N ex75.txt	     ------------- Using Buddy system algorithm

Algorithm Description:
Fist Fit:
In the first fit, partition is allocated which is first sufficient from the top of Main Memory.

Next Fit:
Next fit is a modified version of ‘first fit’. It begins as first fit to find a free partition but when called next time it 
starts searching from where it left off, not from the beginning.

Best Fit:
Best fit allocates the process to a partition which is the smallest sufficient partition among the free available partitions.

Buddy system:
divides memory into partitions to try to satisfy a memory request as suitably as possible. This system makes use of splitting memory into halves to try to give a best fit.


How to construct the memory:
There is two struct in the program. The first one is struct block which is block of main memory. this struct contains three variable: start address, end address, length 
of this block, and name of process. The other struct is memory_main which contain the pointer of array that contains pointers: block** blocks. and the other variable the
memory_main contains is int size which idicate the size of this arrayclass. Actually those two struct performs as Arraylist in c++.


Bugs:
Not found yet.

Command:
REQUEST A n 
Allocates n bytes for a process named A . On successful allocation, print
ALLOCATED A x , where A is the name of the allocated process and x is
the relative location of the allocated memory. On error, print
FAIL REQUEST A n

RELEASE A
Releases the memory held by a process A . On success, print FREE A n x
where n is the amount of reclaimed memory and x is the start relative
address of the released memory. On error, print FAIL RELEASE A .

LIST AVAILABLE
Prints location information for all available memory. Prints a list of pairs of "
", where is the amount available and is the starting
location. If there are no available blocks you should return FULL .

LIST ASSIGNED
Returns a list of space separates=d triples including of the form "
", where represents process labels, represents the number
of allocated bytes for that process, and is the relative starting address of the
process. If there are no allocated blocks, this should return NONE .

FIND A
Locates the starting address and size allocated by the process labeled A . If
successful, this command returns an tuple , where is the amount
allocated by A and x is the relative starting address of the process labeled
A.



